#!/bin/bash
set -e
set -o pipefail
shopt -s extglob

PROFILE=@PROFILE@
REPO_GIT="https://bitbucket.software.geant.org/scm/rare/rare-nix.git"
REPO_API="https://bitbucket.software.geant.org/rest/api/1.0/projects/RARE/repos/RARE-NIX"

PATH=/nix/var/nix/profiles/default/bin:@PATH@
NIX_PATH=

self=$(basename $0)

usage () {
    echo "usage: $self OPTIONS
       Available options:
         --list-installed
         --list-available
         --switch-to-generation GENERATION
         --install-release RELEASE
         --install-git COMMIT
         --update-release RELEASE
         --uninstall-generation GENERATION
         --activate-current
         --deactivate-current
         --cleanup
         --help"
    exit 0
}

opts=$(getopt -l list-installed \
              -l list-available \
              -l switch-to-generation: \
              -l install-release: \
              -l install-git: \
              -l update-release: \
              -l uninstall-generation: \
              -l activate-current \
              -l deactivate-current \
              -l cleanup \
              -l help \
              -o "" \
              -n $self \
              -- "$@")
[ $? -eq 0 ] || usage
[ $# -eq 0 ] && usage
eval set -- $opts

while [ $# -gt 0 ]; do
    case "$1" in
        --list-available)
            list_available=1
            shift
            ;;
        --list-installed)
            list_installed=1
            shift
            ;;
        --switch-to-generation)
            switch_to_generation=$2
            shift 2
            ;;
        --uninstall-generation)
            uninstall_generation=$2
            shift 2
            ;;
        --install-release)
            install_release=$2
            shift 2
            ;;
        --install-git)
            install_git=$2
            shift 2
            ;;
        --update-release)
            update_release=$2
            shift 2
            ;;
        --activate-current)
            activate=1
            shift
            ;;
        --deactivate-current)
            deactivate=1
            shift
            ;;
        --cleanup)
            cleanup=1
            shift
            ;;
        --help)
            usage
            ;;
        *)
            break
            ;;
    esac
done
[ $# -gt 1 ] && usage

paths_to_rm=()
_cleanup () {
    for path in ${paths_to_rm[@]}; do
        rm -rf $path
    done
}

trap _cleanup EXIT TERM INT

if [ -t 0 -a $(tput colors) -gt 1 ]; then
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    normal=$(tput sgr0)
fi

INFO () {
    echo "${green}INFO: $@${normal}"
}

ERROR () {
    echo "${red}ERROR: $@${normal}" >&2
    exit 1
}

branch_from_tag () {
    tag=$1
    echo $tag | cut -d- -f2
}

declare -A gens gens_by_id gens_by_gitTag install_dates installed_releases available_releases
declare -A slices

gen_from_path () {
    echo $1 | sed -e 's/.*-\([0-9]*\)-link$/\1/'
}

for path in $PROFILE-*-link; do
    [ -h $path ] || continue
    slice=$(cat $path/slice)
    id=$(cat $path/version):$slice
    gen=$(gen_from_path $path)
    if [ -n "${gens_by_id[$id]}" ]; then
        INFO "Generation $gen is a duplicate of ${gens_by_id[$id]}, ignoring"
    else
        gens[$gen]=$id
        gens_by_id[$id]=$gen
        install_dates[$gen]=$(stat -c "%z" $path)
        slices[$gen]=$slice

        read version gitTag rest < <(echo $id | tr ':' ' ')
        installed_releases[$version]="${installed_releases[$version]} $gitTag"
        gens_by_gitTag[$gitTag]=$gen
    fi
done
current_gen=$(gen_from_path $(readlink $PROFILE))
kernel_release=${KERNEL_RELEASE:-$(uname -r)}
. /etc/machine.conf
platform=$onie_machine
[ -z "$platform" ] && ERROR "Can't determine platform (check onie_machine in /etc/machine.conf)"

check_root () {
    [ $(id -u) == 0 ] && return
    ERROR "Please run this command as root"
    exit 1
}

ischroot () {
    check_root
    [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]
}

### Activate the current profile
SYSTEMD_DIR=/etc/systemd/system
CONFIG_DIR=/etc/freertr
CONFIG_SW=$CONFIG_DIR/rtr-sw.txt
CONFIG_HW=$CONFIG_DIR/rtr-hw.txt
SNMP_CONFIG_DIR=/etc/snmp
SNMPD_CONFIG=$SNMP_CONFIG_DIR/snmpd.conf
IFINDEX=$SNMP_CONFIG_DIR/ifindex.init
SNMP_STATE_DIR=/var/lib/snmp
INTERFACE_CONFIG=$SNMP_STATE_DIR/interface.conf
SHELL_PROFILE=/etc/profile.d/RARE.sh
activate () {
    check_root
    INFO "Enabling services"
    for service in $PROFILE$SYSTEMD_DIR/*.service; do
        ln -fs $service $SYSTEMD_DIR
        systemctl enable $(basename $service)
    done
    ! ischroot && systemctl daemon-reload
    for dir in $CONFIG_DIR $SNMP_CONFIG_DIR $SNMP_STATE_DIR; do
        [ -d $dir ] || mkdir -p $dir
    done
    for file in $IFINDEX $INTERFACE_CONFIG; do
        cp $PROFILE$file $file
    done
    for config in $CONFIG_SW $CONFIG_HW $SNMPD_CONFIG; do
        [ -e $config ] || cp $PROFILE$config $config
    done
    if [ ! -e $SHELL_PROFILE ]; then
        echo PATH=$PROFILE/bin:\$PATH >$SHELL_PROFILE
    fi
    if ! ischroot; then
        INFO "Starting services"
        systemctl start freerouter snmpd
    fi
}

### Deactivate the current profile
deactivate () {
    check_root
    INFO "Stopping services"
    systemctl stop snmpd freerouter || true
    INFO "Disabling services"
    for service in $PROFILE/$SYSTEMD_DIR/*.service; do
        systemctl disable $(basename $service) || true
    done
    INFO "Unloading kernel modules"
    for module in $(lsmod | awk '{print $1}'); do
        [[ $module =~ bf_ ]] && rmmod $module || true
    done
}

list_installed () {
    local version gitTag kernelID kernelRelease platform is_current
    echo "Generation Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date"
    echo "-----------------------------------------------------------------------------------------------------------------------------------------------------------"
    for gen in $(printf '%s\n' "${!gens[@]}" | sort -n); do
        read version gitTag kernelID kernelRelease platform < <(echo ${gens[$gen]} | tr ':' ' ')
        is_current=' '
        [ $gen -eq $current_gen ] && is_current='*'
        printf "%10d $is_current       %-7s %-26s %-14s %-25s %-26s %s\n" $gen $version $gitTag $kernelID $kernelRelease $platform "${install_dates[$gen]}"
    done
}

_api_call () {
    local http_code
    exec 17>&1
    set -e
    http_code=$(curl -s --write-out '\n%{http_code}\n' $REPO_API$1 | tee /dev/fd/17 | tail -n 1)
    set +e
    exec 17>&-
    if [ $http_code -ge 400 ] && [ $http_code -lt 600 ]; then
	echo -e "\nHTTP $http_code" >&2
	return 1
    fi
}

api_call () {
    set +e
    result=$(_api_call $1 | sed '$d')
    rc=$?
    set -e
    if [ $rc == 0 ]; then
	echo $result
    else
	ERROR "Github API call $1 failed: $result"
    fi
}

get_available_releases () {
    INFO "Checking for release tags of $REPO_GIT"
    result=$(api_call '/tags?limit=1000')
    for tag in $(jq -rc '.values[].displayId' <<<$result); do
        [[ $tag =~ ^release-.*$ ]] || continue
        version=$(echo $tag | cut -d- -f2)
        available_releases[$version]=$tag
    done
}

list_available () {
    get_available_releases
    echo
    echo "Version  Status"
    echo "-------------------------------------------------------------------"
    for version in $(printf '%s\n' "${!available_releases[@]}" | sort); do
        printf "%8s " $version
        if [ -n "${installed_releases[$version]}" ]; then
            printf 'Installed'
            gitTag=${available_releases[$version]}
            commit_head=$(api_call '/branches?limit=1000&filterText='$(branch_from_tag $gitTag) | jq -r '.values[0].latestCommit')
            commit_tag=$(api_call '/tags?limit=1000&name='$(branch_from_tag $gitTag) | jq -r '.values[0].latestCommit')
            if [ $commit_tag != $commit_head ]; then
                up_to_date=
                for tag in ${installed_releases[$version]}; do
                    commit=${tag#release-+([^-])-+([0-9])-g}
                    [[ $commit_head =~ ^$commit ]] && up_to_date=$tag
                done
                if [ -n "$up_to_date" ]; then
                    echo ", up-to-date version installed in generation ${gens_by_gitTag[$up_to_date]}"
                else
                    echo ", updates available, use \"release-manager --update-release $version\" to install"
                fi
            else
                echo ", no updates available"
            fi
        else
            echo "Not installed"
        fi
    done
}

switch_to_generation () {
    check_root
    if [ -z "${gens[$switch_to_generation]}" ]; then
        ERROR "Generation $switch_to_generation does not exist"
    fi
    if [ $switch_to_generation -eq $current_gen ]; then
        ERROR "Generation $switch_to_generation is already the current version"
    fi
    INFO "Deactivating current instance"
    deactivate
    nix-env -p $PROFILE --switch-generation $switch_to_generation
    ## The new release may have a different activation procedure.  Use
    ## its native release-manager to perform the activation.
    INFO "Activating new instance"
    $PROFILE/bin/release-manager --activate
}

_check_installed () {
    id=$(nix eval --raw \
             '(with import ./. { gitTag = "'$gitTag'"; kernelRelease = "'$kernel_release'"; platform = "'$platform'"; };
               with install; with builtins;
               replaceStrings ["\n"] [""] (readFile (versionFile + "/version") + ":" +
                                           readFile (sliceFile + "/slice")))')
    gen=${gens_by_id[$id]}
    if [ -n "$gen" ]; then
        ERROR "Release $version (Id: $id) is already installed as generation $gen"
    fi
}

_install () {
    gitTag=$1
    nix-env -f . -p $PROFILE -r -i -A install --argstr gitTag $gitTag --argstr kernelRelease $kernel_release --argstr platform $platform
    new_gen=$(gen_from_path $(readlink $PROFILE))
    ## nix-env has automatically switched to the new
    ## generation, revert back
    nix-env -p $PROFILE --switch-generation $current_gen 2>/dev/null

    INFO "Use \"release-manager --switch-to-generation $new_gen\" to switch to the new release"
}

install_git () {
    check_root
    tmp=$(mktemp -d)
    paths_to_rm+=$tmp
    pushd $tmp >/dev/null
    INFO "Fetching $install_git"
    git init -b master
    git remote add origin $REPO_GIT
    git fetch origin
    git reset --hard $install_git

    gitTag=$(git describe --always)
    if ! [[ "$gitTag" =~ ^release-.*$ ]]; then
        ERROR "Commits preceeding release-1 are not supported"
    fi
    _check_installed
    _install $gitTag

    popd >/dev/null
}

_check_release () {
    local release
    release=$1
    get_available_releases
    gitTag=${available_releases[$release]}
    if [ -z "$gitTag" ]; then
        ERROR "Release $release does not exist"
    fi
}

install_release () {
    ERROR "Not yet implemented"
    _check_release $install_release
    check_root
    tarball=$REPO_GIT/archive/$gitTag.tar.gz
    INFO "Fetching package release tarball $tarball"
    tmp=$(mktemp -d)
    paths_to_rm+=$tmp
    pushd $tmp >/dev/null
    curl -L -O $tarball 2>/dev/null
    tar xf release-* --strip-component 1
    _check_installed
    _install $gitTag
    popd >/dev/null
}

update_release () {
    _check_release $update_release
    check_root
    install_git=$(api_call '/branches?limit=1000&filterText='$(branch_from_tag $gitTag) | jq -r '.values[0].latestCommit')
    install_git
}

uninstall_generation () {
    check_root
    if [ -z "${gens[$uninstall_generation]}" ]; then
        ERROR "Generation $uninstall_generation does not exist"
    fi
    if [ $uninstall_generation -eq $current_gen ]; then
        ERROR "Can't uninstall current generation"
    fi
    nix-env -p $PROFILE --delete-generations $uninstall_generation
}

cleanup () {
    nix-collect-garbage
}

[ -n "$list_installed" ] && list_installed
[ -n "$list_available" ] && list_available
[ -n "$switch_to_generation" ] && switch_to_generation
[ -n "$install_release" ] && install_release
[ -n "$install_git" ] && install_git
[ -n "$update_release" ] && update_release
[ -n "$uninstall_generation" ] && uninstall_generation
[ -n "$activate" ] && activate
[ -n "$deactivate" ] && deactivate
[ -n "$cleanup" ] && cleanup
exit 0
